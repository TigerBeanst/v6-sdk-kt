// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.rpc.RpcTransport in rpc_transport.proto
@file:Suppress("DEPRECATION")

package api.v6.rpc

import com.squareup.wire.AnyMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

/**
 * import "google/protobuf/struct.proto";
 */
public class RpcTransport(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val command: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val identity: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val type: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.AnyMessage#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "data",
    schemaIndex = 3,
  )
  public val data_: AnyMessage? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val status: Int = 0,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val message: String = "",
  @field:WireField(
    tag = 7,
    adapter = "v6.rpc.RpcMetaData#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val meta: RpcMetaData? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<RpcTransport, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RpcTransport) return false
    if (unknownFields != other.unknownFields) return false
    if (command != other.command) return false
    if (identity != other.identity) return false
    if (type != other.type) return false
    if (data_ != other.data_) return false
    if (status != other.status) return false
    if (message != other.message) return false
    if (meta != other.meta) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + command.hashCode()
      result = result * 37 + identity.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + (data_?.hashCode() ?: 0)
      result = result * 37 + status.hashCode()
      result = result * 37 + message.hashCode()
      result = result * 37 + (meta?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """command=${sanitize(command)}"""
    result += """identity=${sanitize(identity)}"""
    result += """type=$type"""
    if (data_ != null) result += """data_=$data_"""
    result += """status=$status"""
    result += """message=${sanitize(message)}"""
    if (meta != null) result += """meta=$meta"""
    return result.joinToString(prefix = "RpcTransport{", separator = ", ", postfix = "}")
  }

  public fun copy(
    command: String = this.command,
    identity: String = this.identity,
    type: Int = this.type,
    data_: AnyMessage? = this.data_,
    status: Int = this.status,
    message: String = this.message,
    meta: RpcMetaData? = this.meta,
    unknownFields: ByteString = this.unknownFields,
  ): RpcTransport = RpcTransport(command, identity, type, data_, status, message, meta,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<RpcTransport> = object : ProtoAdapter<RpcTransport>(
      FieldEncoding.LENGTH_DELIMITED, 
      RpcTransport::class, 
      "type.googleapis.com/v6.rpc.RpcTransport", 
      PROTO_3, 
      null, 
      "rpc_transport.proto"
    ) {
      override fun encodedSize(`value`: RpcTransport): Int {
        var size = value.unknownFields.size
        if (value.command != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.command)
        if (value.identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.identity)
        if (value.type != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.type)
        if (value.data_ != null) size += AnyMessage.ADAPTER.encodedSizeWithTag(4, value.data_)
        if (value.status != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(5, value.status)
        if (value.message != "") size += ProtoAdapter.STRING.encodedSizeWithTag(6, value.message)
        if (value.meta != null) size += RpcMetaData.ADAPTER.encodedSizeWithTag(7, value.meta)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: RpcTransport) {
        if (value.command != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.command)
        if (value.identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.identity)
        if (value.type != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.type)
        if (value.data_ != null) AnyMessage.ADAPTER.encodeWithTag(writer, 4, value.data_)
        if (value.status != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.status)
        if (value.message != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.message)
        if (value.meta != null) RpcMetaData.ADAPTER.encodeWithTag(writer, 7, value.meta)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: RpcTransport) {
        writer.writeBytes(value.unknownFields)
        if (value.meta != null) RpcMetaData.ADAPTER.encodeWithTag(writer, 7, value.meta)
        if (value.message != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.message)
        if (value.status != 0) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.status)
        if (value.data_ != null) AnyMessage.ADAPTER.encodeWithTag(writer, 4, value.data_)
        if (value.type != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.type)
        if (value.identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.identity)
        if (value.command != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.command)
      }

      override fun decode(reader: ProtoReader): RpcTransport {
        var command: String = ""
        var identity: String = ""
        var type: Int = 0
        var data_: AnyMessage? = null
        var status: Int = 0
        var message: String = ""
        var meta: RpcMetaData? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> command = ProtoAdapter.STRING.decode(reader)
            2 -> identity = ProtoAdapter.STRING.decode(reader)
            3 -> type = ProtoAdapter.INT32.decode(reader)
            4 -> data_ = AnyMessage.ADAPTER.decode(reader)
            5 -> status = ProtoAdapter.INT32.decode(reader)
            6 -> message = ProtoAdapter.STRING.decode(reader)
            7 -> meta = RpcMetaData.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return RpcTransport(
          command = command,
          identity = identity,
          type = type,
          data_ = data_,
          status = status,
          message = message,
          meta = meta,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: RpcTransport): RpcTransport = value.copy(
        data_ = value.data_?.let(AnyMessage.ADAPTER::redact),
        meta = value.meta?.let(RpcMetaData.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
