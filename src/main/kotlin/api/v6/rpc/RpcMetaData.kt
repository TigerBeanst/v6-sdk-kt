// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.rpc.RpcMetaData in rpc_transport.proto
@file:Suppress("DEPRECATION")

package api.v6.rpc

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.Map
import kotlin.lazy
import okio.ByteString

public class RpcMetaData(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val timestamp: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val from: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val version: Int = 0,
  header_: Map<String, RpcHeaderValue> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<RpcMetaData, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 4,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "v6.rpc.RpcHeaderValue#ADAPTER",
    declaredName = "header",
    schemaIndex = 3,
  )
  public val header_: Map<String, RpcHeaderValue> = immutableCopyOf("header_", header_)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RpcMetaData) return false
    if (unknownFields != other.unknownFields) return false
    if (timestamp != other.timestamp) return false
    if (from != other.from) return false
    if (version != other.version) return false
    if (header_ != other.header_) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + timestamp.hashCode()
      result = result * 37 + from.hashCode()
      result = result * 37 + version.hashCode()
      result = result * 37 + header_.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """timestamp=$timestamp"""
    result += """from=${sanitize(from)}"""
    result += """version=$version"""
    if (header_.isNotEmpty()) result += """header_=$header_"""
    return result.joinToString(prefix = "RpcMetaData{", separator = ", ", postfix = "}")
  }

  public fun copy(
    timestamp: Long = this.timestamp,
    from: String = this.from,
    version: Int = this.version,
    header_: Map<String, RpcHeaderValue> = this.header_,
    unknownFields: ByteString = this.unknownFields,
  ): RpcMetaData = RpcMetaData(timestamp, from, version, header_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<RpcMetaData> = object : ProtoAdapter<RpcMetaData>(
      FieldEncoding.LENGTH_DELIMITED, 
      RpcMetaData::class, 
      "type.googleapis.com/v6.rpc.RpcMetaData", 
      PROTO_3, 
      null, 
      "rpc_transport.proto"
    ) {
      private val headerAdapter: ProtoAdapter<Map<String, RpcHeaderValue>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, RpcHeaderValue.ADAPTER) }

      override fun encodedSize(`value`: RpcMetaData): Int {
        var size = value.unknownFields.size
        if (value.timestamp != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(1, value.timestamp)
        if (value.from != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.from)
        if (value.version != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.version)
        size += headerAdapter.encodedSizeWithTag(4, value.header_)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: RpcMetaData) {
        if (value.timestamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.timestamp)
        if (value.from != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.from)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.version)
        headerAdapter.encodeWithTag(writer, 4, value.header_)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: RpcMetaData) {
        writer.writeBytes(value.unknownFields)
        headerAdapter.encodeWithTag(writer, 4, value.header_)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.version)
        if (value.from != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.from)
        if (value.timestamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.timestamp)
      }

      override fun decode(reader: ProtoReader): RpcMetaData {
        var timestamp: Long = 0L
        var from: String = ""
        var version: Int = 0
        val header_ = mutableMapOf<String, RpcHeaderValue>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> timestamp = ProtoAdapter.INT64.decode(reader)
            2 -> from = ProtoAdapter.STRING.decode(reader)
            3 -> version = ProtoAdapter.INT32.decode(reader)
            4 -> header_.putAll(headerAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return RpcMetaData(
          timestamp = timestamp,
          from = from,
          version = version,
          header_ = header_,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: RpcMetaData): RpcMetaData = value.copy(
        header_ = value.header_.redactElements(RpcHeaderValue.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
