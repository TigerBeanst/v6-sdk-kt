// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.p2p.StartDownloadResponse in webrtc_manager.proto
@file:Suppress("DEPRECATION")

package api.v6.services.p2p

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString

public class StartDownloadResponse(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "contentIdentity",
    schemaIndex = 0,
  )
  public val content_identity: String = "",
  peers: List<RtcPeerInfo> = emptyList(),
  backend_peers: List<RtcPeerInfo> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<StartDownloadResponse, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    adapter = "v6.services.p2p.RtcPeerInfo#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 1,
  )
  public val peers: List<RtcPeerInfo> = immutableCopyOf("peers", peers)

  @field:WireField(
    tag = 3,
    adapter = "v6.services.p2p.RtcPeerInfo#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "backendPeers",
    schemaIndex = 2,
  )
  public val backend_peers: List<RtcPeerInfo> = immutableCopyOf("backend_peers", backend_peers)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is StartDownloadResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (content_identity != other.content_identity) return false
    if (peers != other.peers) return false
    if (backend_peers != other.backend_peers) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + content_identity.hashCode()
      result = result * 37 + peers.hashCode()
      result = result * 37 + backend_peers.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """content_identity=${sanitize(content_identity)}"""
    if (peers.isNotEmpty()) result += """peers=$peers"""
    if (backend_peers.isNotEmpty()) result += """backend_peers=$backend_peers"""
    return result.joinToString(prefix = "StartDownloadResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    content_identity: String = this.content_identity,
    peers: List<RtcPeerInfo> = this.peers,
    backend_peers: List<RtcPeerInfo> = this.backend_peers,
    unknownFields: ByteString = this.unknownFields,
  ): StartDownloadResponse = StartDownloadResponse(content_identity, peers, backend_peers,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<StartDownloadResponse> = object :
        ProtoAdapter<StartDownloadResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      StartDownloadResponse::class, 
      "type.googleapis.com/v6.services.p2p.StartDownloadResponse", 
      PROTO_3, 
      null, 
      "webrtc_manager.proto"
    ) {
      override fun encodedSize(`value`: StartDownloadResponse): Int {
        var size = value.unknownFields.size
        if (value.content_identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.content_identity)
        size += RtcPeerInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.peers)
        size += RtcPeerInfo.ADAPTER.asRepeated().encodedSizeWithTag(3, value.backend_peers)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: StartDownloadResponse) {
        if (value.content_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.content_identity)
        RtcPeerInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.peers)
        RtcPeerInfo.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.backend_peers)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: StartDownloadResponse) {
        writer.writeBytes(value.unknownFields)
        RtcPeerInfo.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.backend_peers)
        RtcPeerInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.peers)
        if (value.content_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.content_identity)
      }

      override fun decode(reader: ProtoReader): StartDownloadResponse {
        var content_identity: String = ""
        val peers = mutableListOf<RtcPeerInfo>()
        val backend_peers = mutableListOf<RtcPeerInfo>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> content_identity = ProtoAdapter.STRING.decode(reader)
            2 -> peers.add(RtcPeerInfo.ADAPTER.decode(reader))
            3 -> backend_peers.add(RtcPeerInfo.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return StartDownloadResponse(
          content_identity = content_identity,
          peers = peers,
          backend_peers = backend_peers,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: StartDownloadResponse): StartDownloadResponse = value.copy(
        peers = value.peers.redactElements(RtcPeerInfo.ADAPTER),
        backend_peers = value.backend_peers.redactElements(RtcPeerInfo.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
