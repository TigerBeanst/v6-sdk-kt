// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.p2p.WebRTCManageService in webrtc_manager.proto
@file:Suppress("DEPRECATION")

package api.v6.services.p2p

import com.squareup.wire.GrpcCall
import com.squareup.wire.GrpcClient
import com.squareup.wire.GrpcMethod
import com.squareup.wire.GrpcStreamingCall
import kotlin.Suppress

public class GrpcWebRTCManageServiceClient(
  private val client: GrpcClient,
) : WebRTCManageServiceClient {
  override fun StartDownload(): GrpcCall<StartDownloadRequest, StartDownloadResponse> =
      client.newCall(GrpcMethod(
      path = "/v6.services.p2p.WebRTCManageService/StartDownload",
      requestAdapter = StartDownloadRequest.ADAPTER,
      responseAdapter = StartDownloadResponse.ADAPTER
  ))

  override fun StopDownload(): GrpcCall<StopDownloadRequest, StopDownloadResponse> =
      client.newCall(GrpcMethod(
      path = "/v6.services.p2p.WebRTCManageService/StopDownload",
      requestAdapter = StopDownloadRequest.ADAPTER,
      responseAdapter = StopDownloadResponse.ADAPTER
  ))

  override fun Disconnect(): GrpcCall<DisconnectRequest, DisconnectResponse> =
      client.newCall(GrpcMethod(
      path = "/v6.services.p2p.WebRTCManageService/Disconnect",
      requestAdapter = DisconnectRequest.ADAPTER,
      responseAdapter = DisconnectResponse.ADAPTER
  ))

  override fun SendPeerIceCandidate():
      GrpcCall<SendPeerIceCandidateRequest, SendPeerIceCandidateResponse> =
      client.newCall(GrpcMethod(
      path = "/v6.services.p2p.WebRTCManageService/SendPeerIceCandidate",
      requestAdapter = SendPeerIceCandidateRequest.ADAPTER,
      responseAdapter = SendPeerIceCandidateResponse.ADAPTER
  ))

  override fun Receive(): GrpcStreamingCall<ReceiveRequest, ReceiveResponse> =
      client.newStreamingCall(GrpcMethod(
      path = "/v6.services.p2p.WebRTCManageService/Receive",
      requestAdapter = ReceiveRequest.ADAPTER,
      responseAdapter = ReceiveResponse.ADAPTER
  ))
}
