// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.ParseFileSliceResponse in public_user_file.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString

/**
 * message ParseFileSliceRequest {
 *    string content_identity = 1;
 *    // string client_identity = 2;
 * }
 */
public class ParseFileSliceResponse(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "contentIdentity",
    schemaIndex = 0,
  )
  public val content_identity: String = "",
  meta_nodes: List<String> = emptyList(),
  raw_nodes: List<String> = emptyList(),
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "fileSize",
    schemaIndex = 3,
  )
  public val file_size: Long = 0L,
  sizes: List<SliceSize> = emptyList(),
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val sha1: String = "",
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "wcsEtag",
    schemaIndex = 6,
  )
  public val wcs_etag: String = "",
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val name: String = "",
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 8,
  )
  public val path: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ParseFileSliceResponse, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "metaNodes",
    schemaIndex = 1,
  )
  public val meta_nodes: List<String> = immutableCopyOf("meta_nodes", meta_nodes)

  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "rawNodes",
    schemaIndex = 2,
  )
  public val raw_nodes: List<String> = immutableCopyOf("raw_nodes", raw_nodes)

  @field:WireField(
    tag = 5,
    adapter = "v6.services.pub.SliceSize#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 4,
  )
  public val sizes: List<SliceSize> = immutableCopyOf("sizes", sizes)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ParseFileSliceResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (content_identity != other.content_identity) return false
    if (meta_nodes != other.meta_nodes) return false
    if (raw_nodes != other.raw_nodes) return false
    if (file_size != other.file_size) return false
    if (sizes != other.sizes) return false
    if (sha1 != other.sha1) return false
    if (wcs_etag != other.wcs_etag) return false
    if (name != other.name) return false
    if (path != other.path) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + content_identity.hashCode()
      result = result * 37 + meta_nodes.hashCode()
      result = result * 37 + raw_nodes.hashCode()
      result = result * 37 + file_size.hashCode()
      result = result * 37 + sizes.hashCode()
      result = result * 37 + sha1.hashCode()
      result = result * 37 + wcs_etag.hashCode()
      result = result * 37 + name.hashCode()
      result = result * 37 + path.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """content_identity=${sanitize(content_identity)}"""
    if (meta_nodes.isNotEmpty()) result += """meta_nodes=${sanitize(meta_nodes)}"""
    if (raw_nodes.isNotEmpty()) result += """raw_nodes=${sanitize(raw_nodes)}"""
    result += """file_size=$file_size"""
    if (sizes.isNotEmpty()) result += """sizes=$sizes"""
    result += """sha1=${sanitize(sha1)}"""
    result += """wcs_etag=${sanitize(wcs_etag)}"""
    result += """name=${sanitize(name)}"""
    result += """path=${sanitize(path)}"""
    return result.joinToString(prefix = "ParseFileSliceResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    content_identity: String = this.content_identity,
    meta_nodes: List<String> = this.meta_nodes,
    raw_nodes: List<String> = this.raw_nodes,
    file_size: Long = this.file_size,
    sizes: List<SliceSize> = this.sizes,
    sha1: String = this.sha1,
    wcs_etag: String = this.wcs_etag,
    name: String = this.name,
    path: String = this.path,
    unknownFields: ByteString = this.unknownFields,
  ): ParseFileSliceResponse = ParseFileSliceResponse(content_identity, meta_nodes, raw_nodes,
      file_size, sizes, sha1, wcs_etag, name, path, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ParseFileSliceResponse> = object :
        ProtoAdapter<ParseFileSliceResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      ParseFileSliceResponse::class, 
      "type.googleapis.com/v6.services.pub.ParseFileSliceResponse", 
      PROTO_3, 
      null, 
      "public_user_file.proto"
    ) {
      override fun encodedSize(`value`: ParseFileSliceResponse): Int {
        var size = value.unknownFields.size
        if (value.content_identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.content_identity)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.meta_nodes)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.raw_nodes)
        if (value.file_size != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(4, value.file_size)
        size += SliceSize.ADAPTER.asRepeated().encodedSizeWithTag(5, value.sizes)
        if (value.sha1 != "") size += ProtoAdapter.STRING.encodedSizeWithTag(6, value.sha1)
        if (value.wcs_etag != "") size += ProtoAdapter.STRING.encodedSizeWithTag(7, value.wcs_etag)
        if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(8, value.name)
        if (value.path != "") size += ProtoAdapter.STRING.encodedSizeWithTag(9, value.path)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ParseFileSliceResponse) {
        if (value.content_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.content_identity)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.meta_nodes)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.raw_nodes)
        if (value.file_size != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.file_size)
        SliceSize.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.sizes)
        if (value.sha1 != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.sha1)
        if (value.wcs_etag != "") ProtoAdapter.STRING.encodeWithTag(writer, 7, value.wcs_etag)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 8, value.name)
        if (value.path != "") ProtoAdapter.STRING.encodeWithTag(writer, 9, value.path)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ParseFileSliceResponse) {
        writer.writeBytes(value.unknownFields)
        if (value.path != "") ProtoAdapter.STRING.encodeWithTag(writer, 9, value.path)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 8, value.name)
        if (value.wcs_etag != "") ProtoAdapter.STRING.encodeWithTag(writer, 7, value.wcs_etag)
        if (value.sha1 != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.sha1)
        SliceSize.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.sizes)
        if (value.file_size != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.file_size)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.raw_nodes)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.meta_nodes)
        if (value.content_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.content_identity)
      }

      override fun decode(reader: ProtoReader): ParseFileSliceResponse {
        var content_identity: String = ""
        val meta_nodes = mutableListOf<String>()
        val raw_nodes = mutableListOf<String>()
        var file_size: Long = 0L
        val sizes = mutableListOf<SliceSize>()
        var sha1: String = ""
        var wcs_etag: String = ""
        var name: String = ""
        var path: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> content_identity = ProtoAdapter.STRING.decode(reader)
            2 -> meta_nodes.add(ProtoAdapter.STRING.decode(reader))
            3 -> raw_nodes.add(ProtoAdapter.STRING.decode(reader))
            4 -> file_size = ProtoAdapter.INT64.decode(reader)
            5 -> sizes.add(SliceSize.ADAPTER.decode(reader))
            6 -> sha1 = ProtoAdapter.STRING.decode(reader)
            7 -> wcs_etag = ProtoAdapter.STRING.decode(reader)
            8 -> name = ProtoAdapter.STRING.decode(reader)
            9 -> path = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ParseFileSliceResponse(
          content_identity = content_identity,
          meta_nodes = meta_nodes,
          raw_nodes = raw_nodes,
          file_size = file_size,
          sizes = sizes,
          sha1 = sha1,
          wcs_etag = wcs_etag,
          name = name,
          path = path,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ParseFileSliceResponse): ParseFileSliceResponse = value.copy(
        sizes = value.sizes.redactElements(SliceSize.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
