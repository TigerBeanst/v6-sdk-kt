// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.Complaint in file_share.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class Complaint(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val identity: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "userIdentity",
    schemaIndex = 1,
  )
  public val user_identity: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "fileShareIdentity",
    schemaIndex = 2,
  )
  public val file_share_identity: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "fileShareUserIdentity",
    schemaIndex = 3,
  )
  public val file_share_user_identity: String = "",
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val content: String = "",
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "createTs",
    schemaIndex = 5,
  )
  public val create_ts: Long = 0L,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "updateTs",
    schemaIndex = 6,
  )
  public val update_ts: Long = 0L,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val status: Int = 0,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 8,
  )
  public val flag: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Complaint, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Complaint) return false
    if (unknownFields != other.unknownFields) return false
    if (identity != other.identity) return false
    if (user_identity != other.user_identity) return false
    if (file_share_identity != other.file_share_identity) return false
    if (file_share_user_identity != other.file_share_user_identity) return false
    if (content != other.content) return false
    if (create_ts != other.create_ts) return false
    if (update_ts != other.update_ts) return false
    if (status != other.status) return false
    if (flag != other.flag) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + identity.hashCode()
      result = result * 37 + user_identity.hashCode()
      result = result * 37 + file_share_identity.hashCode()
      result = result * 37 + file_share_user_identity.hashCode()
      result = result * 37 + content.hashCode()
      result = result * 37 + create_ts.hashCode()
      result = result * 37 + update_ts.hashCode()
      result = result * 37 + status.hashCode()
      result = result * 37 + flag.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """identity=${sanitize(identity)}"""
    result += """user_identity=${sanitize(user_identity)}"""
    result += """file_share_identity=${sanitize(file_share_identity)}"""
    result += """file_share_user_identity=${sanitize(file_share_user_identity)}"""
    result += """content=${sanitize(content)}"""
    result += """create_ts=$create_ts"""
    result += """update_ts=$update_ts"""
    result += """status=$status"""
    result += """flag=$flag"""
    return result.joinToString(prefix = "Complaint{", separator = ", ", postfix = "}")
  }

  public fun copy(
    identity: String = this.identity,
    user_identity: String = this.user_identity,
    file_share_identity: String = this.file_share_identity,
    file_share_user_identity: String = this.file_share_user_identity,
    content: String = this.content,
    create_ts: Long = this.create_ts,
    update_ts: Long = this.update_ts,
    status: Int = this.status,
    flag: Int = this.flag,
    unknownFields: ByteString = this.unknownFields,
  ): Complaint = Complaint(identity, user_identity, file_share_identity, file_share_user_identity,
      content, create_ts, update_ts, status, flag, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Complaint> = object : ProtoAdapter<Complaint>(
      FieldEncoding.LENGTH_DELIMITED, 
      Complaint::class, 
      "type.googleapis.com/v6.services.pub.Complaint", 
      PROTO_3, 
      null, 
      "file_share.proto"
    ) {
      override fun encodedSize(`value`: Complaint): Int {
        var size = value.unknownFields.size
        if (value.identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.identity)
        if (value.user_identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.user_identity)
        if (value.file_share_identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.file_share_identity)
        if (value.file_share_user_identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4,
            value.file_share_user_identity)
        if (value.content != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.content)
        if (value.create_ts != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(6, value.create_ts)
        if (value.update_ts != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(7, value.update_ts)
        if (value.status != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(8, value.status)
        if (value.flag != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(9, value.flag)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: Complaint) {
        if (value.identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.identity)
        if (value.user_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.user_identity)
        if (value.file_share_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.file_share_identity)
        if (value.file_share_user_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 4,
            value.file_share_user_identity)
        if (value.content != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.content)
        if (value.create_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.create_ts)
        if (value.update_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 7, value.update_ts)
        if (value.status != 0) ProtoAdapter.INT32.encodeWithTag(writer, 8, value.status)
        if (value.flag != 0) ProtoAdapter.INT32.encodeWithTag(writer, 9, value.flag)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: Complaint) {
        writer.writeBytes(value.unknownFields)
        if (value.flag != 0) ProtoAdapter.INT32.encodeWithTag(writer, 9, value.flag)
        if (value.status != 0) ProtoAdapter.INT32.encodeWithTag(writer, 8, value.status)
        if (value.update_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 7, value.update_ts)
        if (value.create_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.create_ts)
        if (value.content != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.content)
        if (value.file_share_user_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 4,
            value.file_share_user_identity)
        if (value.file_share_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.file_share_identity)
        if (value.user_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.user_identity)
        if (value.identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.identity)
      }

      override fun decode(reader: ProtoReader): Complaint {
        var identity: String = ""
        var user_identity: String = ""
        var file_share_identity: String = ""
        var file_share_user_identity: String = ""
        var content: String = ""
        var create_ts: Long = 0L
        var update_ts: Long = 0L
        var status: Int = 0
        var flag: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> identity = ProtoAdapter.STRING.decode(reader)
            2 -> user_identity = ProtoAdapter.STRING.decode(reader)
            3 -> file_share_identity = ProtoAdapter.STRING.decode(reader)
            4 -> file_share_user_identity = ProtoAdapter.STRING.decode(reader)
            5 -> content = ProtoAdapter.STRING.decode(reader)
            6 -> create_ts = ProtoAdapter.INT64.decode(reader)
            7 -> update_ts = ProtoAdapter.INT64.decode(reader)
            8 -> status = ProtoAdapter.INT32.decode(reader)
            9 -> flag = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Complaint(
          identity = identity,
          user_identity = user_identity,
          file_share_identity = file_share_identity,
          file_share_user_identity = file_share_user_identity,
          content = content,
          create_ts = create_ts,
          update_ts = update_ts,
          status = status,
          flag = flag,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: Complaint): Complaint = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
