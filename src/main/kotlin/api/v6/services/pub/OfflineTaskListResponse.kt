// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.OfflineTaskListResponse in public_user_offline.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString
import api.v6.services.pub.common.ScanListRequest

public class OfflineTaskListResponse(
  tasks: List<UserTask> = emptyList(),
  @field:WireField(
    tag = 2,
    adapter = "v6.services.pub.common.ScanListRequest#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "listInfo",
    schemaIndex = 1,
  )
  public val list_info: ScanListRequest? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<OfflineTaskListResponse, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "v6.services.pub.UserTask#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  public val tasks: List<UserTask> = immutableCopyOf("tasks", tasks)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is OfflineTaskListResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (tasks != other.tasks) return false
    if (list_info != other.list_info) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + tasks.hashCode()
      result = result * 37 + (list_info?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (tasks.isNotEmpty()) result += """tasks=$tasks"""
    if (list_info != null) result += """list_info=$list_info"""
    return result.joinToString(prefix = "OfflineTaskListResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    tasks: List<UserTask> = this.tasks,
    list_info: ScanListRequest? = this.list_info,
    unknownFields: ByteString = this.unknownFields,
  ): OfflineTaskListResponse = OfflineTaskListResponse(tasks, list_info, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<OfflineTaskListResponse> = object :
        ProtoAdapter<OfflineTaskListResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      OfflineTaskListResponse::class, 
      "type.googleapis.com/v6.services.pub.OfflineTaskListResponse", 
      PROTO_3, 
      null, 
      "public_user_offline.proto"
    ) {
      override fun encodedSize(`value`: OfflineTaskListResponse): Int {
        var size = value.unknownFields.size
        size += UserTask.ADAPTER.asRepeated().encodedSizeWithTag(1, value.tasks)
        if (value.list_info != null) size += ScanListRequest.ADAPTER.encodedSizeWithTag(2,
            value.list_info)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: OfflineTaskListResponse) {
        UserTask.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.tasks)
        if (value.list_info != null) ScanListRequest.ADAPTER.encodeWithTag(writer, 2,
            value.list_info)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: OfflineTaskListResponse) {
        writer.writeBytes(value.unknownFields)
        if (value.list_info != null) ScanListRequest.ADAPTER.encodeWithTag(writer, 2,
            value.list_info)
        UserTask.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.tasks)
      }

      override fun decode(reader: ProtoReader): OfflineTaskListResponse {
        val tasks = mutableListOf<UserTask>()
        var list_info: ScanListRequest? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> tasks.add(UserTask.ADAPTER.decode(reader))
            2 -> list_info = ScanListRequest.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return OfflineTaskListResponse(
          tasks = tasks,
          list_info = list_info,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: OfflineTaskListResponse): OfflineTaskListResponse = value.copy(
        tasks = value.tasks.redactElements(UserTask.ADAPTER),
        list_info = value.list_info?.let(ScanListRequest.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
