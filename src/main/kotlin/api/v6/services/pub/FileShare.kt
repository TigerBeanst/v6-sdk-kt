// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.FileShare in file_share.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString

public class FileShare(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val identity: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "userIdentity",
    schemaIndex = 1,
  )
  public val user_identity: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val type: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "mimeType",
    schemaIndex = 3,
  )
  public val mime_type: String = "",
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val name: String = "",
  path_list: List<String> = emptyList(),
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "hasPassword",
    schemaIndex = 6,
  )
  public val has_password: Boolean = false,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val password: String = "",
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 8,
  )
  public val lifetime: Long = 0L,
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "saveLimit",
    schemaIndex = 9,
  )
  public val save_limit: Long = 0L,
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "saveCount",
    schemaIndex = 10,
  )
  public val save_count: Long = 0L,
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 11,
  )
  public val like: Long = 0L,
  @field:WireField(
    tag = 13,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 12,
  )
  public val dislike: Long = 0L,
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "createTs",
    schemaIndex = 13,
  )
  public val create_ts: Long = 0L,
  @field:WireField(
    tag = 15,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "updateTs",
    schemaIndex = 14,
  )
  public val update_ts: Long = 0L,
  @field:WireField(
    tag = 16,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "expireTs",
    schemaIndex = 15,
  )
  public val expire_ts: Long = 0L,
  @field:WireField(
    tag = 17,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "fileSize",
    schemaIndex = 16,
  )
  public val file_size: Long = 0L,
  @field:WireField(
    tag = 18,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "savePath",
    schemaIndex = 17,
  )
  public val save_path: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<FileShare, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    jsonName = "pathList",
    schemaIndex = 5,
  )
  public val path_list: List<String> = immutableCopyOf("path_list", path_list)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FileShare) return false
    if (unknownFields != other.unknownFields) return false
    if (identity != other.identity) return false
    if (user_identity != other.user_identity) return false
    if (type != other.type) return false
    if (mime_type != other.mime_type) return false
    if (name != other.name) return false
    if (path_list != other.path_list) return false
    if (has_password != other.has_password) return false
    if (password != other.password) return false
    if (lifetime != other.lifetime) return false
    if (save_limit != other.save_limit) return false
    if (save_count != other.save_count) return false
    if (like != other.like) return false
    if (dislike != other.dislike) return false
    if (create_ts != other.create_ts) return false
    if (update_ts != other.update_ts) return false
    if (expire_ts != other.expire_ts) return false
    if (file_size != other.file_size) return false
    if (save_path != other.save_path) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + identity.hashCode()
      result = result * 37 + user_identity.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + mime_type.hashCode()
      result = result * 37 + name.hashCode()
      result = result * 37 + path_list.hashCode()
      result = result * 37 + has_password.hashCode()
      result = result * 37 + password.hashCode()
      result = result * 37 + lifetime.hashCode()
      result = result * 37 + save_limit.hashCode()
      result = result * 37 + save_count.hashCode()
      result = result * 37 + like.hashCode()
      result = result * 37 + dislike.hashCode()
      result = result * 37 + create_ts.hashCode()
      result = result * 37 + update_ts.hashCode()
      result = result * 37 + expire_ts.hashCode()
      result = result * 37 + file_size.hashCode()
      result = result * 37 + save_path.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """identity=${sanitize(identity)}"""
    result += """user_identity=${sanitize(user_identity)}"""
    result += """type=$type"""
    result += """mime_type=${sanitize(mime_type)}"""
    result += """name=${sanitize(name)}"""
    if (path_list.isNotEmpty()) result += """path_list=${sanitize(path_list)}"""
    result += """has_password=$has_password"""
    result += """password=${sanitize(password)}"""
    result += """lifetime=$lifetime"""
    result += """save_limit=$save_limit"""
    result += """save_count=$save_count"""
    result += """like=$like"""
    result += """dislike=$dislike"""
    result += """create_ts=$create_ts"""
    result += """update_ts=$update_ts"""
    result += """expire_ts=$expire_ts"""
    result += """file_size=$file_size"""
    result += """save_path=${sanitize(save_path)}"""
    return result.joinToString(prefix = "FileShare{", separator = ", ", postfix = "}")
  }

  public fun copy(
    identity: String = this.identity,
    user_identity: String = this.user_identity,
    type: Int = this.type,
    mime_type: String = this.mime_type,
    name: String = this.name,
    path_list: List<String> = this.path_list,
    has_password: Boolean = this.has_password,
    password: String = this.password,
    lifetime: Long = this.lifetime,
    save_limit: Long = this.save_limit,
    save_count: Long = this.save_count,
    like: Long = this.like,
    dislike: Long = this.dislike,
    create_ts: Long = this.create_ts,
    update_ts: Long = this.update_ts,
    expire_ts: Long = this.expire_ts,
    file_size: Long = this.file_size,
    save_path: String = this.save_path,
    unknownFields: ByteString = this.unknownFields,
  ): FileShare = FileShare(identity, user_identity, type, mime_type, name, path_list, has_password,
      password, lifetime, save_limit, save_count, like, dislike, create_ts, update_ts, expire_ts,
      file_size, save_path, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<FileShare> = object : ProtoAdapter<FileShare>(
      FieldEncoding.LENGTH_DELIMITED, 
      FileShare::class, 
      "type.googleapis.com/v6.services.pub.FileShare", 
      PROTO_3, 
      null, 
      "file_share.proto"
    ) {
      override fun encodedSize(`value`: FileShare): Int {
        var size = value.unknownFields.size
        if (value.identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.identity)
        if (value.user_identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.user_identity)
        if (value.type != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.type)
        if (value.mime_type != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4,
            value.mime_type)
        if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.name)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(6, value.path_list)
        if (value.has_password != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(7,
            value.has_password)
        if (value.password != "") size += ProtoAdapter.STRING.encodedSizeWithTag(8, value.password)
        if (value.lifetime != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(9, value.lifetime)
        if (value.save_limit != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(10,
            value.save_limit)
        if (value.save_count != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(11,
            value.save_count)
        if (value.like != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(12, value.like)
        if (value.dislike != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(13, value.dislike)
        if (value.create_ts != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(14,
            value.create_ts)
        if (value.update_ts != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(15,
            value.update_ts)
        if (value.expire_ts != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(16,
            value.expire_ts)
        if (value.file_size != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(17,
            value.file_size)
        if (value.save_path != "") size += ProtoAdapter.STRING.encodedSizeWithTag(18,
            value.save_path)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: FileShare) {
        if (value.identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.identity)
        if (value.user_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.user_identity)
        if (value.type != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.type)
        if (value.mime_type != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.mime_type)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.name)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 6, value.path_list)
        if (value.has_password != false) ProtoAdapter.BOOL.encodeWithTag(writer, 7,
            value.has_password)
        if (value.password != "") ProtoAdapter.STRING.encodeWithTag(writer, 8, value.password)
        if (value.lifetime != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 9, value.lifetime)
        if (value.save_limit != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 10, value.save_limit)
        if (value.save_count != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 11, value.save_count)
        if (value.like != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 12, value.like)
        if (value.dislike != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 13, value.dislike)
        if (value.create_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 14, value.create_ts)
        if (value.update_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 15, value.update_ts)
        if (value.expire_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 16, value.expire_ts)
        if (value.file_size != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 17, value.file_size)
        if (value.save_path != "") ProtoAdapter.STRING.encodeWithTag(writer, 18, value.save_path)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: FileShare) {
        writer.writeBytes(value.unknownFields)
        if (value.save_path != "") ProtoAdapter.STRING.encodeWithTag(writer, 18, value.save_path)
        if (value.file_size != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 17, value.file_size)
        if (value.expire_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 16, value.expire_ts)
        if (value.update_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 15, value.update_ts)
        if (value.create_ts != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 14, value.create_ts)
        if (value.dislike != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 13, value.dislike)
        if (value.like != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 12, value.like)
        if (value.save_count != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 11, value.save_count)
        if (value.save_limit != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 10, value.save_limit)
        if (value.lifetime != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 9, value.lifetime)
        if (value.password != "") ProtoAdapter.STRING.encodeWithTag(writer, 8, value.password)
        if (value.has_password != false) ProtoAdapter.BOOL.encodeWithTag(writer, 7,
            value.has_password)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 6, value.path_list)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.name)
        if (value.mime_type != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.mime_type)
        if (value.type != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.type)
        if (value.user_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.user_identity)
        if (value.identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.identity)
      }

      override fun decode(reader: ProtoReader): FileShare {
        var identity: String = ""
        var user_identity: String = ""
        var type: Int = 0
        var mime_type: String = ""
        var name: String = ""
        val path_list = mutableListOf<String>()
        var has_password: Boolean = false
        var password: String = ""
        var lifetime: Long = 0L
        var save_limit: Long = 0L
        var save_count: Long = 0L
        var like: Long = 0L
        var dislike: Long = 0L
        var create_ts: Long = 0L
        var update_ts: Long = 0L
        var expire_ts: Long = 0L
        var file_size: Long = 0L
        var save_path: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> identity = ProtoAdapter.STRING.decode(reader)
            2 -> user_identity = ProtoAdapter.STRING.decode(reader)
            3 -> type = ProtoAdapter.INT32.decode(reader)
            4 -> mime_type = ProtoAdapter.STRING.decode(reader)
            5 -> name = ProtoAdapter.STRING.decode(reader)
            6 -> path_list.add(ProtoAdapter.STRING.decode(reader))
            7 -> has_password = ProtoAdapter.BOOL.decode(reader)
            8 -> password = ProtoAdapter.STRING.decode(reader)
            9 -> lifetime = ProtoAdapter.INT64.decode(reader)
            10 -> save_limit = ProtoAdapter.INT64.decode(reader)
            11 -> save_count = ProtoAdapter.INT64.decode(reader)
            12 -> like = ProtoAdapter.INT64.decode(reader)
            13 -> dislike = ProtoAdapter.INT64.decode(reader)
            14 -> create_ts = ProtoAdapter.INT64.decode(reader)
            15 -> update_ts = ProtoAdapter.INT64.decode(reader)
            16 -> expire_ts = ProtoAdapter.INT64.decode(reader)
            17 -> file_size = ProtoAdapter.INT64.decode(reader)
            18 -> save_path = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return FileShare(
          identity = identity,
          user_identity = user_identity,
          type = type,
          mime_type = mime_type,
          name = name,
          path_list = path_list,
          has_password = has_password,
          password = password,
          lifetime = lifetime,
          save_limit = save_limit,
          save_count = save_count,
          like = like,
          dislike = dislike,
          create_ts = create_ts,
          update_ts = update_ts,
          expire_ts = expire_ts,
          file_size = file_size,
          save_path = save_path,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: FileShare): FileShare = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
