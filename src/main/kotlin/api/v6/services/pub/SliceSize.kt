// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.SliceSize in public_user_file.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class SliceSize(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "startIndex",
    schemaIndex = 0,
  )
  public val start_index: Long = 0L,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "endIndex",
    schemaIndex = 1,
  )
  public val end_index: Long = 0L,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val size: Long = 0L,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<SliceSize, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SliceSize) return false
    if (unknownFields != other.unknownFields) return false
    if (start_index != other.start_index) return false
    if (end_index != other.end_index) return false
    if (size != other.size) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + start_index.hashCode()
      result = result * 37 + end_index.hashCode()
      result = result * 37 + size.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """start_index=$start_index"""
    result += """end_index=$end_index"""
    result += """size=$size"""
    return result.joinToString(prefix = "SliceSize{", separator = ", ", postfix = "}")
  }

  public fun copy(
    start_index: Long = this.start_index,
    end_index: Long = this.end_index,
    size: Long = this.size,
    unknownFields: ByteString = this.unknownFields,
  ): SliceSize = SliceSize(start_index, end_index, size, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<SliceSize> = object : ProtoAdapter<SliceSize>(
      FieldEncoding.LENGTH_DELIMITED, 
      SliceSize::class, 
      "type.googleapis.com/v6.services.pub.SliceSize", 
      PROTO_3, 
      null, 
      "public_user_file.proto"
    ) {
      override fun encodedSize(`value`: SliceSize): Int {
        var size_ = value.unknownFields.size
        if (value.start_index != 0L) size_ += ProtoAdapter.INT64.encodedSizeWithTag(1,
            value.start_index)
        if (value.end_index != 0L) size_ += ProtoAdapter.INT64.encodedSizeWithTag(2,
            value.end_index)
        if (value.size != 0L) size_ += ProtoAdapter.INT64.encodedSizeWithTag(3, value.size)
        return size_
      }

      override fun encode(writer: ProtoWriter, `value`: SliceSize) {
        if (value.start_index != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.start_index)
        if (value.end_index != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.end_index)
        if (value.size != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.size)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: SliceSize) {
        writer.writeBytes(value.unknownFields)
        if (value.size != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.size)
        if (value.end_index != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.end_index)
        if (value.start_index != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.start_index)
      }

      override fun decode(reader: ProtoReader): SliceSize {
        var start_index: Long = 0L
        var end_index: Long = 0L
        var size: Long = 0L
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> start_index = ProtoAdapter.INT64.decode(reader)
            2 -> end_index = ProtoAdapter.INT64.decode(reader)
            3 -> size = ProtoAdapter.INT64.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return SliceSize(
          start_index = start_index,
          end_index = end_index,
          size = size,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: SliceSize): SliceSize = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
