// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.UploadToken in public_user_file.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class UploadToken(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val token: String = "",
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "accessKey",
    schemaIndex = 1,
  )
  public val access_key: String = "",
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "secretKey",
    schemaIndex = 2,
  )
  public val secret_key: String = "",
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val bucket: String = "",
  @field:WireField(
    tag = 13,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val region: String = "",
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val endpoint: String = "",
  @field:WireField(
    tag = 15,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val key: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<UploadToken, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is UploadToken) return false
    if (unknownFields != other.unknownFields) return false
    if (token != other.token) return false
    if (access_key != other.access_key) return false
    if (secret_key != other.secret_key) return false
    if (bucket != other.bucket) return false
    if (region != other.region) return false
    if (endpoint != other.endpoint) return false
    if (key != other.key) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + token.hashCode()
      result = result * 37 + access_key.hashCode()
      result = result * 37 + secret_key.hashCode()
      result = result * 37 + bucket.hashCode()
      result = result * 37 + region.hashCode()
      result = result * 37 + endpoint.hashCode()
      result = result * 37 + key.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """token=${sanitize(token)}"""
    result += """access_key=${sanitize(access_key)}"""
    result += """secret_key=${sanitize(secret_key)}"""
    result += """bucket=${sanitize(bucket)}"""
    result += """region=${sanitize(region)}"""
    result += """endpoint=${sanitize(endpoint)}"""
    result += """key=${sanitize(key)}"""
    return result.joinToString(prefix = "UploadToken{", separator = ", ", postfix = "}")
  }

  public fun copy(
    token: String = this.token,
    access_key: String = this.access_key,
    secret_key: String = this.secret_key,
    bucket: String = this.bucket,
    region: String = this.region,
    endpoint: String = this.endpoint,
    key: String = this.key,
    unknownFields: ByteString = this.unknownFields,
  ): UploadToken = UploadToken(token, access_key, secret_key, bucket, region, endpoint, key,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<UploadToken> = object : ProtoAdapter<UploadToken>(
      FieldEncoding.LENGTH_DELIMITED, 
      UploadToken::class, 
      "type.googleapis.com/v6.services.pub.UploadToken", 
      PROTO_3, 
      null, 
      "public_user_file.proto"
    ) {
      override fun encodedSize(`value`: UploadToken): Int {
        var size = value.unknownFields.size
        if (value.token != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.token)
        if (value.access_key != "") size += ProtoAdapter.STRING.encodedSizeWithTag(10,
            value.access_key)
        if (value.secret_key != "") size += ProtoAdapter.STRING.encodedSizeWithTag(11,
            value.secret_key)
        if (value.bucket != "") size += ProtoAdapter.STRING.encodedSizeWithTag(12, value.bucket)
        if (value.region != "") size += ProtoAdapter.STRING.encodedSizeWithTag(13, value.region)
        if (value.endpoint != "") size += ProtoAdapter.STRING.encodedSizeWithTag(14, value.endpoint)
        if (value.key != "") size += ProtoAdapter.STRING.encodedSizeWithTag(15, value.key)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: UploadToken) {
        if (value.token != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.token)
        if (value.access_key != "") ProtoAdapter.STRING.encodeWithTag(writer, 10, value.access_key)
        if (value.secret_key != "") ProtoAdapter.STRING.encodeWithTag(writer, 11, value.secret_key)
        if (value.bucket != "") ProtoAdapter.STRING.encodeWithTag(writer, 12, value.bucket)
        if (value.region != "") ProtoAdapter.STRING.encodeWithTag(writer, 13, value.region)
        if (value.endpoint != "") ProtoAdapter.STRING.encodeWithTag(writer, 14, value.endpoint)
        if (value.key != "") ProtoAdapter.STRING.encodeWithTag(writer, 15, value.key)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: UploadToken) {
        writer.writeBytes(value.unknownFields)
        if (value.key != "") ProtoAdapter.STRING.encodeWithTag(writer, 15, value.key)
        if (value.endpoint != "") ProtoAdapter.STRING.encodeWithTag(writer, 14, value.endpoint)
        if (value.region != "") ProtoAdapter.STRING.encodeWithTag(writer, 13, value.region)
        if (value.bucket != "") ProtoAdapter.STRING.encodeWithTag(writer, 12, value.bucket)
        if (value.secret_key != "") ProtoAdapter.STRING.encodeWithTag(writer, 11, value.secret_key)
        if (value.access_key != "") ProtoAdapter.STRING.encodeWithTag(writer, 10, value.access_key)
        if (value.token != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.token)
      }

      override fun decode(reader: ProtoReader): UploadToken {
        var token: String = ""
        var access_key: String = ""
        var secret_key: String = ""
        var bucket: String = ""
        var region: String = ""
        var endpoint: String = ""
        var key: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> token = ProtoAdapter.STRING.decode(reader)
            10 -> access_key = ProtoAdapter.STRING.decode(reader)
            11 -> secret_key = ProtoAdapter.STRING.decode(reader)
            12 -> bucket = ProtoAdapter.STRING.decode(reader)
            13 -> region = ProtoAdapter.STRING.decode(reader)
            14 -> endpoint = ProtoAdapter.STRING.decode(reader)
            15 -> key = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return UploadToken(
          token = token,
          access_key = access_key,
          secret_key = secret_key,
          bucket = bucket,
          region = region,
          endpoint = endpoint,
          key = key,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: UploadToken): UploadToken = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
