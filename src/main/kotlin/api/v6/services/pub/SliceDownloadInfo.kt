// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.SliceDownloadInfo in public_user_file.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class SliceDownloadInfo(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val identity: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "downloadAddress",
    schemaIndex = 1,
  )
  public val download_address: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "downloadToken",
    schemaIndex = 2,
  )
  public val download_token: String = "",
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val encrypt: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<SliceDownloadInfo, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SliceDownloadInfo) return false
    if (unknownFields != other.unknownFields) return false
    if (identity != other.identity) return false
    if (download_address != other.download_address) return false
    if (download_token != other.download_token) return false
    if (encrypt != other.encrypt) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + identity.hashCode()
      result = result * 37 + download_address.hashCode()
      result = result * 37 + download_token.hashCode()
      result = result * 37 + encrypt.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """identity=${sanitize(identity)}"""
    result += """download_address=${sanitize(download_address)}"""
    result += """download_token=${sanitize(download_token)}"""
    result += """encrypt=$encrypt"""
    return result.joinToString(prefix = "SliceDownloadInfo{", separator = ", ", postfix = "}")
  }

  public fun copy(
    identity: String = this.identity,
    download_address: String = this.download_address,
    download_token: String = this.download_token,
    encrypt: Int = this.encrypt,
    unknownFields: ByteString = this.unknownFields,
  ): SliceDownloadInfo = SliceDownloadInfo(identity, download_address, download_token, encrypt,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<SliceDownloadInfo> = object : ProtoAdapter<SliceDownloadInfo>(
      FieldEncoding.LENGTH_DELIMITED, 
      SliceDownloadInfo::class, 
      "type.googleapis.com/v6.services.pub.SliceDownloadInfo", 
      PROTO_3, 
      null, 
      "public_user_file.proto"
    ) {
      override fun encodedSize(`value`: SliceDownloadInfo): Int {
        var size = value.unknownFields.size
        if (value.identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.identity)
        if (value.download_address != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.download_address)
        if (value.download_token != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.download_token)
        if (value.encrypt != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.encrypt)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: SliceDownloadInfo) {
        if (value.identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.identity)
        if (value.download_address != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.download_address)
        if (value.download_token != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.download_token)
        if (value.encrypt != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.encrypt)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: SliceDownloadInfo) {
        writer.writeBytes(value.unknownFields)
        if (value.encrypt != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.encrypt)
        if (value.download_token != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.download_token)
        if (value.download_address != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.download_address)
        if (value.identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.identity)
      }

      override fun decode(reader: ProtoReader): SliceDownloadInfo {
        var identity: String = ""
        var download_address: String = ""
        var download_token: String = ""
        var encrypt: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> identity = ProtoAdapter.STRING.decode(reader)
            2 -> download_address = ProtoAdapter.STRING.decode(reader)
            3 -> download_token = ProtoAdapter.STRING.decode(reader)
            4 -> encrypt = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return SliceDownloadInfo(
          identity = identity,
          download_address = download_address,
          download_token = download_token,
          encrypt = encrypt,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: SliceDownloadInfo): SliceDownloadInfo = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
