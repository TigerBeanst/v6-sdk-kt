// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.SliceDownloadAddressRequest in public_user_file.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString

public class SliceDownloadAddressRequest(
  identity: List<String> = emptyList(),
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val version: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<SliceDownloadAddressRequest, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  public val identity: List<String> = immutableCopyOf("identity", identity)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SliceDownloadAddressRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (identity != other.identity) return false
    if (version != other.version) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + identity.hashCode()
      result = result * 37 + version.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (identity.isNotEmpty()) result += """identity=${sanitize(identity)}"""
    result += """version=$version"""
    return result.joinToString(prefix = "SliceDownloadAddressRequest{", separator = ", ", postfix =
        "}")
  }

  public fun copy(
    identity: List<String> = this.identity,
    version: Int = this.version,
    unknownFields: ByteString = this.unknownFields,
  ): SliceDownloadAddressRequest = SliceDownloadAddressRequest(identity, version, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<SliceDownloadAddressRequest> = object :
        ProtoAdapter<SliceDownloadAddressRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      SliceDownloadAddressRequest::class, 
      "type.googleapis.com/v6.services.pub.SliceDownloadAddressRequest", 
      PROTO_3, 
      null, 
      "public_user_file.proto"
    ) {
      override fun encodedSize(`value`: SliceDownloadAddressRequest): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(1, value.identity)
        if (value.version != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.version)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: SliceDownloadAddressRequest) {
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1, value.identity)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: SliceDownloadAddressRequest) {
        writer.writeBytes(value.unknownFields)
        if (value.version != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1, value.identity)
      }

      override fun decode(reader: ProtoReader): SliceDownloadAddressRequest {
        val identity = mutableListOf<String>()
        var version: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> identity.add(ProtoAdapter.STRING.decode(reader))
            2 -> version = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return SliceDownloadAddressRequest(
          identity = identity,
          version = version,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: SliceDownloadAddressRequest): SliceDownloadAddressRequest =
          value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
