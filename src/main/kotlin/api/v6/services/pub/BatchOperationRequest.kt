// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.BatchOperationRequest in public_user_file.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString

public class BatchOperationRequest(
  source: List<File> = emptyList(),
  @field:WireField(
    tag = 2,
    adapter = "v6.services.pub.File#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val dest: File? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val operation: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val flag: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<BatchOperationRequest, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "v6.services.pub.File#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  public val source: List<File> = immutableCopyOf("source", source)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is BatchOperationRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (source != other.source) return false
    if (dest != other.dest) return false
    if (operation != other.operation) return false
    if (flag != other.flag) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + source.hashCode()
      result = result * 37 + (dest?.hashCode() ?: 0)
      result = result * 37 + operation.hashCode()
      result = result * 37 + flag.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (source.isNotEmpty()) result += """source=$source"""
    if (dest != null) result += """dest=$dest"""
    result += """operation=$operation"""
    result += """flag=$flag"""
    return result.joinToString(prefix = "BatchOperationRequest{", separator = ", ", postfix = "}")
  }

  public fun copy(
    source: List<File> = this.source,
    dest: File? = this.dest,
    operation: Int = this.operation,
    flag: Int = this.flag,
    unknownFields: ByteString = this.unknownFields,
  ): BatchOperationRequest = BatchOperationRequest(source, dest, operation, flag, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<BatchOperationRequest> = object :
        ProtoAdapter<BatchOperationRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      BatchOperationRequest::class, 
      "type.googleapis.com/v6.services.pub.BatchOperationRequest", 
      PROTO_3, 
      null, 
      "public_user_file.proto"
    ) {
      override fun encodedSize(`value`: BatchOperationRequest): Int {
        var size = value.unknownFields.size
        size += File.ADAPTER.asRepeated().encodedSizeWithTag(1, value.source)
        if (value.dest != null) size += File.ADAPTER.encodedSizeWithTag(2, value.dest)
        if (value.operation != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.operation)
        if (value.flag != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.flag)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: BatchOperationRequest) {
        File.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.source)
        if (value.dest != null) File.ADAPTER.encodeWithTag(writer, 2, value.dest)
        if (value.operation != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.operation)
        if (value.flag != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.flag)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: BatchOperationRequest) {
        writer.writeBytes(value.unknownFields)
        if (value.flag != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.flag)
        if (value.operation != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.operation)
        if (value.dest != null) File.ADAPTER.encodeWithTag(writer, 2, value.dest)
        File.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.source)
      }

      override fun decode(reader: ProtoReader): BatchOperationRequest {
        val source = mutableListOf<File>()
        var dest: File? = null
        var operation: Int = 0
        var flag: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> source.add(File.ADAPTER.decode(reader))
            2 -> dest = File.ADAPTER.decode(reader)
            3 -> operation = ProtoAdapter.INT32.decode(reader)
            4 -> flag = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return BatchOperationRequest(
          source = source,
          dest = dest,
          operation = operation,
          flag = flag,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: BatchOperationRequest): BatchOperationRequest = value.copy(
        source = value.source.redactElements(File.ADAPTER),
        dest = value.dest?.let(File.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
