// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.TaskParseResponse in public_user_offline.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString

public class TaskParseResponse(
  @field:WireField(
    tag = 1,
    adapter = "v6.services.pub.TaskMeta#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val meta: TaskMeta? = null,
  task_files: List<TaskFile> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<TaskParseResponse, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    adapter = "v6.services.pub.TaskFile#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "taskFiles",
    schemaIndex = 1,
  )
  public val task_files: List<TaskFile> = immutableCopyOf("task_files", task_files)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TaskParseResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (meta != other.meta) return false
    if (task_files != other.task_files) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (meta?.hashCode() ?: 0)
      result = result * 37 + task_files.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (meta != null) result += """meta=$meta"""
    if (task_files.isNotEmpty()) result += """task_files=$task_files"""
    return result.joinToString(prefix = "TaskParseResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    meta: TaskMeta? = this.meta,
    task_files: List<TaskFile> = this.task_files,
    unknownFields: ByteString = this.unknownFields,
  ): TaskParseResponse = TaskParseResponse(meta, task_files, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TaskParseResponse> = object : ProtoAdapter<TaskParseResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      TaskParseResponse::class, 
      "type.googleapis.com/v6.services.pub.TaskParseResponse", 
      PROTO_3, 
      null, 
      "public_user_offline.proto"
    ) {
      override fun encodedSize(`value`: TaskParseResponse): Int {
        var size = value.unknownFields.size
        if (value.meta != null) size += TaskMeta.ADAPTER.encodedSizeWithTag(1, value.meta)
        size += TaskFile.ADAPTER.asRepeated().encodedSizeWithTag(2, value.task_files)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: TaskParseResponse) {
        if (value.meta != null) TaskMeta.ADAPTER.encodeWithTag(writer, 1, value.meta)
        TaskFile.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.task_files)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: TaskParseResponse) {
        writer.writeBytes(value.unknownFields)
        TaskFile.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.task_files)
        if (value.meta != null) TaskMeta.ADAPTER.encodeWithTag(writer, 1, value.meta)
      }

      override fun decode(reader: ProtoReader): TaskParseResponse {
        var meta: TaskMeta? = null
        val task_files = mutableListOf<TaskFile>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> meta = TaskMeta.ADAPTER.decode(reader)
            2 -> task_files.add(TaskFile.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return TaskParseResponse(
          meta = meta,
          task_files = task_files,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: TaskParseResponse): TaskParseResponse = value.copy(
        meta = value.meta?.let(TaskMeta.ADAPTER::redact),
        task_files = value.task_files.redactElements(TaskFile.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
