// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.RegisterRequest in user_svc.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class RegisterRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val name: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val password: String = "",
  /**
   * string country_code = 3;
   * string phone = 4;
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val email: String = "",
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "smsCaptcha",
    schemaIndex = 3,
  )
  public val sms_captcha: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val captcha: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<RegisterRequest, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RegisterRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (name != other.name) return false
    if (password != other.password) return false
    if (email != other.email) return false
    if (sms_captcha != other.sms_captcha) return false
    if (captcha != other.captcha) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + name.hashCode()
      result = result * 37 + password.hashCode()
      result = result * 37 + email.hashCode()
      result = result * 37 + sms_captcha.hashCode()
      result = result * 37 + captcha.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """name=${sanitize(name)}"""
    result += """password=${sanitize(password)}"""
    result += """email=${sanitize(email)}"""
    result += """sms_captcha=${sanitize(sms_captcha)}"""
    result += """captcha=${sanitize(captcha)}"""
    return result.joinToString(prefix = "RegisterRequest{", separator = ", ", postfix = "}")
  }

  public fun copy(
    name: String = this.name,
    password: String = this.password,
    email: String = this.email,
    sms_captcha: String = this.sms_captcha,
    captcha: String = this.captcha,
    unknownFields: ByteString = this.unknownFields,
  ): RegisterRequest = RegisterRequest(name, password, email, sms_captcha, captcha, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<RegisterRequest> = object : ProtoAdapter<RegisterRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      RegisterRequest::class, 
      "type.googleapis.com/v6.services.pub.RegisterRequest", 
      PROTO_3, 
      null, 
      "user_svc.proto"
    ) {
      override fun encodedSize(`value`: RegisterRequest): Int {
        var size = value.unknownFields.size
        if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
        if (value.password != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.password)
        if (value.email != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.email)
        if (value.sms_captcha != "") size += ProtoAdapter.STRING.encodedSizeWithTag(6,
            value.sms_captcha)
        if (value.captcha != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.captcha)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: RegisterRequest) {
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        if (value.password != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.password)
        if (value.email != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.email)
        if (value.sms_captcha != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.sms_captcha)
        if (value.captcha != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.captcha)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: RegisterRequest) {
        writer.writeBytes(value.unknownFields)
        if (value.captcha != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.captcha)
        if (value.sms_captcha != "") ProtoAdapter.STRING.encodeWithTag(writer, 6, value.sms_captcha)
        if (value.email != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.email)
        if (value.password != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.password)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
      }

      override fun decode(reader: ProtoReader): RegisterRequest {
        var name: String = ""
        var password: String = ""
        var email: String = ""
        var sms_captcha: String = ""
        var captcha: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> name = ProtoAdapter.STRING.decode(reader)
            2 -> password = ProtoAdapter.STRING.decode(reader)
            5 -> email = ProtoAdapter.STRING.decode(reader)
            6 -> sms_captcha = ProtoAdapter.STRING.decode(reader)
            3 -> captcha = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return RegisterRequest(
          name = name,
          password = password,
          email = email,
          sms_captcha = sms_captcha,
          captcha = captcha,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: RegisterRequest): RegisterRequest = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
