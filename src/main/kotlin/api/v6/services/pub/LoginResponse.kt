// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.LoginResponse in user_svc.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class LoginResponse(
  @field:WireField(
    tag = 1,
    adapter = "v6.services.pub.Token#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val token: Token? = null,
  @field:WireField(
    tag = 2,
    adapter = "v6.services.pub.User#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val user: User? = null,
  @field:WireField(
    tag = 3,
    adapter = "v6.services.pub.LastLoginResponse#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "lastLogin",
    schemaIndex = 2,
  )
  public val last_login: LastLoginResponse? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val state: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<LoginResponse, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is LoginResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (token != other.token) return false
    if (user != other.user) return false
    if (last_login != other.last_login) return false
    if (state != other.state) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (token?.hashCode() ?: 0)
      result = result * 37 + (user?.hashCode() ?: 0)
      result = result * 37 + (last_login?.hashCode() ?: 0)
      result = result * 37 + state.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (token != null) result += """token=$token"""
    if (user != null) result += """user=$user"""
    if (last_login != null) result += """last_login=$last_login"""
    result += """state=${sanitize(state)}"""
    return result.joinToString(prefix = "LoginResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    token: Token? = this.token,
    user: User? = this.user,
    last_login: LastLoginResponse? = this.last_login,
    state: String = this.state,
    unknownFields: ByteString = this.unknownFields,
  ): LoginResponse = LoginResponse(token, user, last_login, state, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<LoginResponse> = object : ProtoAdapter<LoginResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      LoginResponse::class, 
      "type.googleapis.com/v6.services.pub.LoginResponse", 
      PROTO_3, 
      null, 
      "user_svc.proto"
    ) {
      override fun encodedSize(`value`: LoginResponse): Int {
        var size = value.unknownFields.size
        if (value.token != null) size += Token.ADAPTER.encodedSizeWithTag(1, value.token)
        if (value.user != null) size += User.ADAPTER.encodedSizeWithTag(2, value.user)
        if (value.last_login != null) size += LastLoginResponse.ADAPTER.encodedSizeWithTag(3,
            value.last_login)
        if (value.state != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.state)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: LoginResponse) {
        if (value.token != null) Token.ADAPTER.encodeWithTag(writer, 1, value.token)
        if (value.user != null) User.ADAPTER.encodeWithTag(writer, 2, value.user)
        if (value.last_login != null) LastLoginResponse.ADAPTER.encodeWithTag(writer, 3,
            value.last_login)
        if (value.state != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.state)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: LoginResponse) {
        writer.writeBytes(value.unknownFields)
        if (value.state != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.state)
        if (value.last_login != null) LastLoginResponse.ADAPTER.encodeWithTag(writer, 3,
            value.last_login)
        if (value.user != null) User.ADAPTER.encodeWithTag(writer, 2, value.user)
        if (value.token != null) Token.ADAPTER.encodeWithTag(writer, 1, value.token)
      }

      override fun decode(reader: ProtoReader): LoginResponse {
        var token: Token? = null
        var user: User? = null
        var last_login: LastLoginResponse? = null
        var state: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> token = Token.ADAPTER.decode(reader)
            2 -> user = User.ADAPTER.decode(reader)
            3 -> last_login = LastLoginResponse.ADAPTER.decode(reader)
            4 -> state = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return LoginResponse(
          token = token,
          user = user,
          last_login = last_login,
          state = state,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: LoginResponse): LoginResponse = value.copy(
        token = value.token?.let(Token.ADAPTER::redact),
        user = value.user?.let(User.ADAPTER::redact),
        last_login = value.last_login?.let(LastLoginResponse.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
