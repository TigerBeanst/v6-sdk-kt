// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.OauthTokenCheckResponse in user_svc.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class OauthTokenCheckResponse(
  @field:WireField(
    tag = 1,
    adapter = "v6.services.pub.LoginResponse#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val login: LoginResponse? = null,
  @field:WireField(
    tag = 2,
    adapter = "v6.services.pub.OauthTokenResponse#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val oauth: OauthTokenResponse? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val status: Int = 0,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val message: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<OauthTokenCheckResponse, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is OauthTokenCheckResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (login != other.login) return false
    if (oauth != other.oauth) return false
    if (status != other.status) return false
    if (message != other.message) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (login?.hashCode() ?: 0)
      result = result * 37 + (oauth?.hashCode() ?: 0)
      result = result * 37 + status.hashCode()
      result = result * 37 + message.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (login != null) result += """login=$login"""
    if (oauth != null) result += """oauth=$oauth"""
    result += """status=$status"""
    result += """message=${sanitize(message)}"""
    return result.joinToString(prefix = "OauthTokenCheckResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    login: LoginResponse? = this.login,
    oauth: OauthTokenResponse? = this.oauth,
    status: Int = this.status,
    message: String = this.message,
    unknownFields: ByteString = this.unknownFields,
  ): OauthTokenCheckResponse = OauthTokenCheckResponse(login, oauth, status, message, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<OauthTokenCheckResponse> = object :
        ProtoAdapter<OauthTokenCheckResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      OauthTokenCheckResponse::class, 
      "type.googleapis.com/v6.services.pub.OauthTokenCheckResponse", 
      PROTO_3, 
      null, 
      "user_svc.proto"
    ) {
      override fun encodedSize(`value`: OauthTokenCheckResponse): Int {
        var size = value.unknownFields.size
        if (value.login != null) size += LoginResponse.ADAPTER.encodedSizeWithTag(1, value.login)
        if (value.oauth != null) size += OauthTokenResponse.ADAPTER.encodedSizeWithTag(2,
            value.oauth)
        if (value.status != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.status)
        if (value.message != "") size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.message)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: OauthTokenCheckResponse) {
        if (value.login != null) LoginResponse.ADAPTER.encodeWithTag(writer, 1, value.login)
        if (value.oauth != null) OauthTokenResponse.ADAPTER.encodeWithTag(writer, 2, value.oauth)
        if (value.status != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.status)
        if (value.message != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.message)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: OauthTokenCheckResponse) {
        writer.writeBytes(value.unknownFields)
        if (value.message != "") ProtoAdapter.STRING.encodeWithTag(writer, 4, value.message)
        if (value.status != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.status)
        if (value.oauth != null) OauthTokenResponse.ADAPTER.encodeWithTag(writer, 2, value.oauth)
        if (value.login != null) LoginResponse.ADAPTER.encodeWithTag(writer, 1, value.login)
      }

      override fun decode(reader: ProtoReader): OauthTokenCheckResponse {
        var login: LoginResponse? = null
        var oauth: OauthTokenResponse? = null
        var status: Int = 0
        var message: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> login = LoginResponse.ADAPTER.decode(reader)
            2 -> oauth = OauthTokenResponse.ADAPTER.decode(reader)
            3 -> status = ProtoAdapter.INT32.decode(reader)
            4 -> message = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return OauthTokenCheckResponse(
          login = login,
          oauth = oauth,
          status = status,
          message = message,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: OauthTokenCheckResponse): OauthTokenCheckResponse = value.copy(
        login = value.login?.let(LoginResponse.ADAPTER::redact),
        oauth = value.oauth?.let(OauthTokenResponse.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
