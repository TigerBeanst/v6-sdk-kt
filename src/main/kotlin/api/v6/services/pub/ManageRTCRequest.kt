// Code generated by Wire protocol buffer compiler, do not edit.
// Source: v6.services.pub.ManageRTCRequest in public_user_file.proto
@file:Suppress("DEPRECATION")

package api.v6.services.pub

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class ManageRTCRequest(
  /**
   * string content_identity = 1;
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val sdp: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val offer: String = "",
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "clientIdentity",
    schemaIndex = 2,
  )
  public val client_identity: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ManageRTCRequest, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ManageRTCRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (sdp != other.sdp) return false
    if (offer != other.offer) return false
    if (client_identity != other.client_identity) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + sdp.hashCode()
      result = result * 37 + offer.hashCode()
      result = result * 37 + client_identity.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """sdp=${sanitize(sdp)}"""
    result += """offer=${sanitize(offer)}"""
    result += """client_identity=${sanitize(client_identity)}"""
    return result.joinToString(prefix = "ManageRTCRequest{", separator = ", ", postfix = "}")
  }

  public fun copy(
    sdp: String = this.sdp,
    offer: String = this.offer,
    client_identity: String = this.client_identity,
    unknownFields: ByteString = this.unknownFields,
  ): ManageRTCRequest = ManageRTCRequest(sdp, offer, client_identity, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ManageRTCRequest> = object : ProtoAdapter<ManageRTCRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      ManageRTCRequest::class, 
      "type.googleapis.com/v6.services.pub.ManageRTCRequest", 
      PROTO_3, 
      null, 
      "public_user_file.proto"
    ) {
      override fun encodedSize(`value`: ManageRTCRequest): Int {
        var size = value.unknownFields.size
        if (value.sdp != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.sdp)
        if (value.offer != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.offer)
        if (value.client_identity != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.client_identity)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ManageRTCRequest) {
        if (value.sdp != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.sdp)
        if (value.offer != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.offer)
        if (value.client_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.client_identity)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ManageRTCRequest) {
        writer.writeBytes(value.unknownFields)
        if (value.client_identity != "") ProtoAdapter.STRING.encodeWithTag(writer, 3,
            value.client_identity)
        if (value.offer != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.offer)
        if (value.sdp != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.sdp)
      }

      override fun decode(reader: ProtoReader): ManageRTCRequest {
        var sdp: String = ""
        var offer: String = ""
        var client_identity: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> sdp = ProtoAdapter.STRING.decode(reader)
            2 -> offer = ProtoAdapter.STRING.decode(reader)
            3 -> client_identity = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ManageRTCRequest(
          sdp = sdp,
          offer = offer,
          client_identity = client_identity,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ManageRTCRequest): ManageRTCRequest = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
